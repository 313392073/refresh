工作方式：
    1 在页面初始化时加载入口模块 其他模块按需异步加载；
    2 存在依赖关系的模块按照一定规则合并为单个文件，一次性加载到页面中
选择的原因：
 支持多种模块标准 
 支持多种类型资源的处理 比如图片 样式等
 拥有活跃社区支持 
 code splitting 即代码分割 意思是分割打包后的资源 首屏只加载必要的部分 不太重要部分翻到后面动态按需加载
 对于体积大的应用来说就是福音啊 可以减小资源体积 提升首页渲染速度

 es6 module 相对于commonjs 的优势
    静态分析优势：
    僵尸代码监测和排除 减小资源打包体积 即用静态分析工具监测模块或接口中哪些没有被调用过
    （比如某个组件只用了部分功能 但有可能所有代码都被加载进来了） 这些加载进来未被调用过的代码就是僵尸代码
    静态分析可以在打包时将这些僵尸代码去掉  减小资源打包体积
    编译器优化： 动态模块的导入是一个对象  而es6 module 可直接导入变量 减少引用层级 提高程序效率

loader 预处理器
    在webpack 的眼中  这些静态资源都是模块 webpack 本身只认识js 其他类型的资源必须预先定义一个或者多个loader转译
    输出为webpack 能接收的形式在继续进行处理 所以说loader 做的就是预处理工作

exclude 和 include
    exclude 用来排除指定目录下的模块 即下面node_modules 中的模块不会执行这条规则 该项配置项通常是必加的 否则会拖慢整体打包速度
    module.exports = {
        rules:[
            {
                test:/\.css$/,
                use:['style-loader','css-loader'],
                exclude:/node_modules/
            }
        ]
    }
    include 用来包含指定目录下的模块
注意，exclude 和 include 都存在时，exclude 优先级高。
resource 和 issuer
    都是用于更加精确地确定模块规则的作用范围
    比如组件 import './index.css' 可以这样子理解 ： 被加载模块是 resource 加载方就是issuer
    module.exports = {
        module:{
            rules:[
                {
                    use:['style-loader','css-loader'],
                    resource:{
                        test:/\.css$/,
                        exclude:/node_modules/
                    },
                    issuer:{
                        test:/\.js$/,
                        exclude:'/node_modules/',
                        include:'/src/pages/'
                    }
                }
            ]
        }
    }
enforce  强制指定一个loader的的作用顺序  默认值式normal
    可选值：pre, 在use配置的所有loader之前执行  如下就是保证检测的代码不是其他loader更改过来的
           post 在use配置的所有loader之后执行
    module.exports = {
        module: {
            rules: [
            {
                test: /\.js$/,
                enforce: 'pre',
                use: 'eslint-loader'
            }
            ]
        }
    }
babel-loader 主要是用来将es6+ 编译成es5
babel-core 是babel编译器的核心模块
babel-preset-env 他是babel官方推荐的预置器  可以根据用户设置的目标环境自动添加所需的插件和补丁来编译es6+代码

cacheDirectory:true 启用缓存机制 在重复打包为改变过的模块时 防止二次编译 同样也会加快打包的速度 
babel-loader 支持从.babelrc文件读取babel配置

分离样式文件
    通过js引入样式文件只是把样式添加到style标签中去了  但是不是引入的一个独立的css文件
一般来说 我们希望样式存在于css文件中而不是style标签内 因为文件更有利于客户端进行缓存
 插件：(专门提取样式到css文件中)
 webpack<4  => extract-text-webpack-plugin
 webpack>=4 => mini-css-extract-plugin


 postCss 
    支持未来的css  使用cssnext 书写未来的css
    编译速度有了很大的提升
    丰富了插件系统
    css可以模块化
 注意： postcss-loader可以配合css-loader 使用  也可以单独使用  
 但是单独使用的时候不建议用css中的@important语法 否则会产生冗余的代码

autoprefixer 自动获取浏览器的流行度和能够支持的属性 并根据这些数据帮你自动为css规则添加前缀
 npm install autoprefixer --save-dev

postCss与Autoprefixer
    postcss必须有一个单独的配置文件 所以还需在项目根目录下配置一个postcss.config.js

    内容如下：
    const autoprefixer = require("autoprefixer")
    module.exports = {
        parser:'sugarss',
        plugins:{
            'autoprefixer':{
                flex:true,
                browsers:[
                    '>1%',
                    'last 3 versions',
                    'androd 4.2',
                    'ie 8'
                ]
            }
        }
    }

资源按需加载-资源异步加载 (可以有效的缩小资源体积 同时更好的利用缓存)
    在webpack中主要提供两种方法：
    1 import函数
    2 require.ensure    
    在webpack4之前  webpack在编译时 会静态解析代码中的require.ensure() 同时将模块添加到一个分开的chunk当中
    这个新的chunk 会被webpack 通过jsonp 来按需加载
webpack 中的import
    与正常es6中的import语法不同 通过import函数加载的模块及其依赖会被异步的进行加载 并返回一个promise对象

注意：
import函还有一个比较重要的特性 es6 module 中要求import 必须出现在代码的顶层作用域
而webpack的import 函数则可以再任何我们希望的时候调用
    eg:
    import(/* webpackChunkName:'demo' */'./demo.js').then(({add}) => {
        conosle.log(...)
    })
    我们通过特有的注释来让Webpack获取到异步chunk的名字，并配置output.chunkFilename为[name].js,由上可以看出

异步chunk的配置
    在webpack的配置中添加了output.chunkFilename 用来指定异步chunk的文件名
其命名规则与output.filename基本一致 不过由于异步chunk默认没有名字 其默认值就是[id].js
